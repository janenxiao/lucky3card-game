{"version":3,"sources":["imgs/iconCoins.svg","components/Sidebar.js","components/Player.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Sidebar","state","visible","toggleVisibility","_this","setState","react_default","a","createElement","className","this","id","type","onClick","title","Component","Player","revealedCount","ante","anteEnabled","wager","playEnabled","roundResult","gameResult","incrementAnte","_this$state","props","playerData","coins","alert","incrementWager","_this$state2","handlePlay","isPlay","isUser","_this$state3","results","onPlay","length","handleNewRound","isNewGame","onNewRound","_this2","style","maxWidth","fontFamily","getPlayerType","getCardContainerId","cards","map","card","src","process","getCardImg","getCardStyle","index","imgReveal","alt","concat","key","iconCoins","position","coinsUpdate","minWidth","typeOfHand","revealed","cardstr","onReveal","cardStyle","left","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","fillInitialPlayerData","handList","userResult","pop","hands","hand","fillPlayerData","user","oppo","handleReveal","newUser","objectSpread","toConsumableArray","coinsChange","toString","newOppo","fillNewRoundPlayerData","arguments","undefined","fetch","then","response","status","console","log","json","data","bind","assertThisInitialized","catch","err","window","cardstrs","src_components_Sidebar","src_components_Player","marginTop","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.82cbec50.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/iconCoins.1e91ff4b.svg\";","import React, { Component } from 'react';\r\nimport './Sidebar.css';\r\n\r\nclass Sidebar extends Component {\r\n  state = {\r\n    visible: true\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={\"col-lg-3 d-none d-lg-block bg-light\" + (this.state.visible ? \"\" : \" invisible\")} id=\"sidebar-wrapper\">\r\n        <div className=\"sidebar-sticky\">\r\n          <button className=\"btn btn-link btn-sm visible\" type=\"button\" onClick={this.toggleVisibility}>{this.state.visible ? \"Hide\" : \"Show Instructions\"}</button>\r\n          <h6>Instructions</h6>\r\n          <ol>\r\n            <li>Learn the rules of <span className=\"font-italic\">Three Card Poker</span></li>\r\n            <li>Click on ANY of the 3 cards on the bottom to flip</li>\r\n            <li>Place ante before flipping the last card</li>\r\n            <li>Place wager and play, or fold. <span className=\"font-weight-light\">Wager can't be greater than ante.</span></li>\r\n            <li>If fold, ante will be deducted</li>\r\n            <li>If play, ante and wager will be paid or lost based on result</li>\r\n            <li>Opponent will gain or lose the same amount</li>\r\n          </ol>\r\n\r\n          <h6>Hand ranks</h6>\r\n          <ol>\r\n            <li title=\"Three cards of same suit in sequence\">Straight flush</li>\r\n            <li title=\"Three cards of same rank\">Three of a kind</li>\r\n            <li title=\"Three cards in sequence\">Straight</li>\r\n            <li title=\"Three cards of same suit\">Flush</li>\r\n            <li title=\"Two cards of same rank\">Pair</li>\r\n            <li>High card</li>\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  toggleVisibility = () => {\r\n    this.setState({ visible: !this.state.visible });\r\n  }\r\n}\r\n\r\nexport default Sidebar;","import React, { Component } from 'react';\r\nimport './Player.css';\r\nimport iconCoins from '../imgs/iconCoins.svg';\r\n\r\n// require every file in the cards folder\r\n// const cardimgs = require.context('../../public/cards', false);\r\n// <img src={cardimgs(\"./4c.svg\")} />\r\n\r\nclass Player extends Component {\r\n  state = {\r\n    revealedCount: 0,\r\n    ante: 1,\r\n    anteEnabled: true,\r\n    wager: 1,\r\n    playEnabled: false,\r\n    roundResult: \"\",\r\n    gameResult: \"\"\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row\" >\r\n        <div className=\"col-8\">\r\n          <div style={{ maxWidth: 353 }}>\r\n            <h5 style={{ fontFamily: 'cursive' }}>{this.getPlayerType()}</h5>\r\n            <div id={this.getCardContainerId()}>\r\n              {this.props.playerData.cards.map(card => (\r\n                <img src={process.env.PUBLIC_URL + this.getCardImg(card)} style={this.getCardStyle(card.index)} className=\"img-fluid\" onClick={() => this.imgReveal(card)} alt={`card${card.index}`} key={`card${card.index}`} />\r\n              ))}\r\n              {this.state.roundResult !== \"\" && // only user will have roundResult and gameResult changed from empty\r\n                <img src={`${process.env.PUBLIC_URL}/img/${this.state.roundResult}.gif`} className=\"img-fluid\" id=\"roundResult-gif\" alt={this.state.roundResult} />\r\n              }\r\n              {this.state.gameResult !== \"\" &&\r\n                <div id=\"gameResult\" className={(this.state.gameResult === \"You win!\") ? \"darksalmonred\" : \"greyshadow\"}>{this.state.gameResult}</div>\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-4 align-self-center\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <img src={iconCoins} className=\"img-fluid\" alt=\"Coins\" />\r\n              <span style={{ position: 'relative' }}>\r\n                <span className=\"m-2 font-weight-bold\">{this.props.playerData.coins}</span>\r\n                {this.props.playerData.coinsUpdate !== \"\" && <span id=\"coins-update\" className=\"m-2 font-weight-bold\">{this.props.playerData.coinsUpdate}</span>}\r\n              </span>\r\n            </div>\r\n            {this.props.playerData.isUser &&\r\n              <div className=\"col\" style={{ minWidth: 120 }}>\r\n                <div>\r\n                  <span className=\"font-weight-light w-33\">ante</span><span className=\"w-33 text-center\">{this.state.ante}</span>\r\n                  {this.state.anteEnabled && <button className=\"btn btn-warning btn-sm\" onClick={this.incrementAnte}>+</button>}\r\n                </div>\r\n                <div>\r\n                  <span className=\"font-weight-light w-33\">wager</span><span className=\"w-33 text-center\">{this.state.wager}</span>\r\n                  {this.state.playEnabled && <button className=\"btn btn-warning btn-sm\" onClick={this.incrementWager}>+</button>}\r\n                </div>\r\n              </div>\r\n            }\r\n          </div>\r\n          {this.props.playerData.coinsUpdate !== \"\" && <span className=\"m-2 font-weight-light\">{this.props.playerData.typeOfHand}</span>}\r\n          {(() => {\r\n            if (this.props.playerData.isUser) {\r\n              if (this.state.playEnabled) {\r\n                return (\r\n                  <div>\r\n                    <button className=\"btn btn-success m-2\" onClick={() => this.handlePlay(true)}>Play</button>\r\n                    <button className=\"btn btn-secondary m-2\" onClick={() => this.handlePlay(false)}>Fold</button>\r\n                  </div>);\r\n              }\r\n              else if (this.state.gameResult !== \"\") { // this game has ended\r\n                return (<button className=\"btn btn-success m-2\" onClick={this.handleNewRound}>New Game</button>);\r\n              }\r\n              else if (this.props.playerData.coinsUpdate !== \"\") {\r\n                return (<button className=\"btn btn-success m-2\" onClick={this.handleNewRound}>Continue</button>);\r\n              }\r\n            }\r\n          })()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getCardImg(card) {\r\n    return card.revealed ? `/cards/${card.cardstr}.svg` : \"/cards/cardback.svg\"\r\n  }\r\n\r\n  imgReveal(card) {\r\n    if (this.props.playerData.isUser && !card.revealed) {\r\n      const { revealedCount } = this.state;\r\n      // when revealing the third card, disable incrementAnte button, show incrementWager button and play and fold button\r\n      if (revealedCount === 2) {\r\n        this.setState({ anteEnabled: false, playEnabled: true });\r\n      }\r\n      this.setState({ revealedCount: revealedCount + 1 });\r\n      this.props.onReveal(card);\r\n    }\r\n  }\r\n\r\n  getCardStyle(index) {\r\n    const left = `${index * 16}%`;\r\n    let cardStyle = {\r\n      left: left\r\n    }\r\n    // position 'absolute' makes element disregard grid rules, like it flows on top of other elements\r\n    // thus need one card hold the position, other card can flow (stack) on top of it\r\n    if (index !== 0)\r\n      cardStyle.position = 'absolute';\r\n    return cardStyle\r\n  }\r\n\r\n  getCardContainerId() {\r\n    return \"cardcontainer-\" + (this.props.playerData.isUser ? \"user\" : \"oppo\");\r\n  }\r\n\r\n  getPlayerType() {\r\n    return this.props.playerData.isUser ? \"You\" : \"Opponent\";\r\n  }\r\n\r\n  incrementAnte = () => {\r\n    const { ante, wager } = this.state;\r\n    if (ante + wager >= this.props.playerData.coins)\r\n      alert(\"Hey that's all the money you've got to ante!\");\r\n    else\r\n      this.setState({ ante: this.state.ante + 1 });\r\n  }\r\n\r\n  incrementWager = () => {\r\n    const { ante, wager } = this.state;\r\n    if (ante + wager >= this.props.playerData.coins)\r\n      alert(\"Hey that's all the money you've got to bet!\");\r\n    else if (wager >= ante)\r\n      alert(\"Hey wager can't be more than ante\");\r\n    else\r\n      this.setState({ wager: this.state.wager + 1 });\r\n  }\r\n\r\n  handlePlay = isPlay => {\r\n    if (this.props.playerData.isUser) {\r\n      const { ante, wager } = this.state;\r\n      const results = this.props.onPlay(isPlay, ante, wager);\r\n\r\n      const roundResult = results[0];\r\n      if (results.length > 1)\r\n        this.setState({ gameResult: results[1] });\r\n\r\n      this.setState({\r\n        ante: 0,\r\n        wager: 0,\r\n        playEnabled: false,\r\n        roundResult\r\n      });\r\n    }\r\n  }\r\n\r\n  handleNewRound = () => {\r\n    if (this.props.playerData.isUser) {\r\n      const isNewGame = this.state.gameResult !== \"\";\r\n      this.props.onNewRound(isNewGame);\r\n\r\n      // when player only has 1 coin, it will be used as ante, so wager should be 0\r\n      const wager = (!isNewGame && this.props.playerData.coins < 2) ? 0 : 1;\r\n      // set to initial state\r\n      this.setState({\r\n        revealedCount: 0,\r\n        ante: 1,\r\n        anteEnabled: true,\r\n        wager: wager,\r\n        roundResult: \"\",\r\n        gameResult: \"\"\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default Player;","import React, { Component } from 'react';\r\n//import './App.css';\r\nimport Sidebar from './components/Sidebar';\r\nimport Player from './components/Player';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (\"handList\" in window)\r\n      this.fillInitialPlayerData(window.handList);\r\n    else { // since fetch() returns a Promise, we first initiate state to random data then update with fetched data\r\n      let handList = [[\"6c\", \"4d\", \"10h\", \"High card\", \"lose\"], [\"12c\", \"7h\", \"10s\", \"High card\"]];\r\n      this.fillInitialPlayerData(handList);\r\n\r\n      this.handleNewRound(false);\r\n    }\r\n  }\r\n\r\n  fillPlayerData(cardstrs, coins = 10) {\r\n    const typeOfHand = cardstrs.pop();\r\n    let cards = cardstrs.map((cardstr, index) => ({ index: index, revealed: false, cardstr: cardstr }));\r\n    let playerData = {\r\n      coins: coins,\r\n      coinsUpdate: \"\",\r\n      typeOfHand: typeOfHand,\r\n      cards: cards\r\n    };\r\n    return playerData;\r\n  }\r\n\r\n  fillInitialPlayerData = handList => {\r\n    const userResult = handList[0].pop();\r\n    let hands = handList.map(hand => this.fillPlayerData(hand));\r\n    hands[0].isUser = true;\r\n    hands[1].isUser = false;\r\n    this.state = {\r\n      user: hands[0],\r\n      oppo: hands[1],\r\n      userResult: userResult\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row justify-content-end\">\r\n          <Sidebar />\r\n          <div className=\"col col-lg-9\">\r\n            <Player playerData={this.state.oppo} />\r\n            <div style={{ marginTop: '10vh' }}>\r\n              <Player playerData={this.state.user} onReveal={this.handleReveal} onPlay={this.handlePlay} onNewRound={this.handleNewRound} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleReveal = card => {\r\n    const newUser = { ...this.state.user };\r\n    newUser.cards = [...newUser.cards];\r\n    newUser.cards[card.index] = { ...card };\r\n    newUser.cards[card.index].revealed = true;\r\n    this.setState({\r\n      user: newUser\r\n    });\r\n  }\r\n\r\n  handlePlay = (isPlay, ante, wager) => {\r\n    const newUser = { ...this.state.user };\r\n    let roundResult, results, coinsChange;\r\n\r\n    if (isPlay) {\r\n      if (this.state.userResult === \"win\") {\r\n        coinsChange = ante + wager;\r\n        roundResult = \"playwin\";\r\n      }\r\n      else if (this.state.userResult === \"lose\") {\r\n        coinsChange = -1 * (ante + wager);\r\n        roundResult = \"playlose\";\r\n      }\r\n      else { // tie\r\n        coinsChange = 0;\r\n        roundResult = \"tie\";\r\n      }\r\n    }\r\n    else { // user folded\r\n      coinsChange = -1 * ante;\r\n      roundResult = (this.state.userResult === \"lose\") ? \"foldlose\" : \"foldwin\";\r\n    }\r\n    newUser.coins += coinsChange;\r\n    newUser.coinsUpdate = ((coinsChange >= 0) ? \"+\" : \"\") + coinsChange.toString();\r\n\r\n    // Reveal opponent's cards and update opponent's coins\r\n    const newOppo = { ...this.state.oppo };\r\n    // deep clone the array of cards by cloning each card\r\n    newOppo.cards = newOppo.cards.map(card => ({ ...card, ...{ revealed: true } }));\r\n    coinsChange = -1 * coinsChange;\r\n    newOppo.coins += coinsChange;\r\n    newOppo.coinsUpdate = ((coinsChange >= 0) ? \"+\" : \"\") + coinsChange.toString();\r\n\r\n    if (newUser.coins <= 0)\r\n      results = [roundResult, \"Good game\"];\r\n    else if (newOppo.coins <= 0)\r\n      results = [roundResult, \"You win!\"];\r\n    else\r\n      results = [roundResult];\r\n\r\n    this.setState({\r\n      user: newUser,\r\n      oppo: newOppo\r\n    });\r\n\r\n    return results;\r\n  }\r\n\r\n  fillNewRoundPlayerData = (handList, isNewGame = false) => {\r\n    const userResult = handList[0].pop();\r\n    let user, oppo;\r\n    if (isNewGame) { // if starting a new game, reset coins to initial state\r\n      user = this.fillPlayerData(handList[0]);\r\n      oppo = this.fillPlayerData(handList[1]);\r\n    }\r\n    else {\r\n      user = this.fillPlayerData(handList[0], this.state.user.coins);\r\n      oppo = this.fillPlayerData(handList[1], this.state.oppo.coins);\r\n    }\r\n    user.isUser = true;\r\n    oppo.isUser = false;\r\n    this.setState({\r\n      user,\r\n      oppo,\r\n      userResult\r\n    });\r\n  }\r\n\r\n  handleNewRound = isNewGame => {\r\n    const fetchURL = '/get_handList';\r\n    fetch(fetchURL)\r\n      // the callback function's this keyword is bound to handleNewRound()'s this keyword, which was inherited from the App class\r\n      .then(function (response) {\r\n        if (response.status !== 200) {\r\n          console.log('Fetch Error: Status Code: ' + response.status);\r\n          alert('Fetch Error: Status Code: ' + response.status);\r\n          return;\r\n        }\r\n        // if request success \r\n        response.json().then(data => this.fillNewRoundPlayerData(data, isNewGame));\r\n      }.bind(this))\r\n      .catch(function (err) {\r\n        console.log('Fetch Error: ', err);\r\n        alert('Fetch Error: ', err);\r\n      });\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}